theory Visa

begin

builtins:  signing, asymmetric-encryption

functions: f/2, MAC/3, MACprime/2

/////////////////////////////////////////////////////
//                     Rules                       //
/////////////////////////////////////////////////////

// ========= Terminal-Issuer Channel ========== //
rule Terminal_Issuer_Channel:
    [ Send(Sender, Recipient, channelID, msg) ]
  -->
    [ Recv(Sender, Recipient, channelID, msg) ]

// =========== Application Transaction Counter ==========//
rule Generate_ATC:
    [ Fr(~ATC) ]-->[ !ATC(~ATC), Out(~ATC) ]

// =============== Card setup ================ //
rule Create_Card:
    [ Fr(~PAN),//card number
      Fr(~mk),//symmetric key shared with issuer
      Fr(~privkCard)//card's private key
    ]
  -->
    [ !SharedKey(~PAN, ~mk),
      //annotate the issuing bank
      !IssuedBy(~PAN, $Issuer),
      //PKI
      !LtkCard(~PAN, ~privkCard),
      !Pk(~PAN, pk(~privkCard)),
      Out(pk(~privkCard))
    ]

// ============== Compromise =============== //
rule Compromise_Card:
    [ !LtkCard(~PAN, ~privkCard) ]
  --[ Compromise(~PAN) ]->
    [ Out(<~PAN, ~privkCard>) ]

rule Compromise_Shared_Key:
    [ !IssuedBy(~PAN, $Issuer),
      !SharedKey(~PAN, ~mk) ]
  --[ Compromise($Issuer),
      Compromise(~PAN) ]->
    [ Out(~mk) ]

// =========== Get Processing Options ============ //
rule Terminal_Sends_GPO:
    let PDOL = <$amount, ~un>
    in
    [ Fr(~un) ]
  -->
    [ Out(<'GET_PROCESSING_OPTIONS', PDOL>),
      Terminal_Sent_GPO($Terminal, PDOL) ]

//offline
rule Card_Responds_To_GPO_TC: //generate sk, fresh nc, receive get processing opttions, compute ac, and send back aip, cid, ...
  let sk = f(~mk, ATC)
      AC = MAC(sk, PDOL, ATC)
      AIP = 'fDDA'
      CID = 'TC'
      transaction = <~PAN, PDOL, ATC, AC>
  in
    [ In(<'GET_PROCESSING_OPTIONS', PDOL>),
      !IssuedBy(~PAN, $Issuer),
      !ATC(ATC),
      !SharedKey(~PAN, ~mk), !LtkCard(~PAN, ~privkCard), !Pk(~PAN, pk(~privkCard_)), Fr(~nc)
    ]
  --[ Once(<~PAN, ATC, 'Card'>), Eq(~privkCard, ~privkCard_), Running(~PAN, 'Terminal', <'Card', 'Terminal', transaction>), Running(~PAN, $Issuer, <'Card', 'Bank', transaction>)
    ]->
    [
      Card_RESPONDED_To_GPO(~PAN, ~mk, $Issuer, ~privkCard, pk(~privkCard), ATC, ~nc, sk, AC, AIP, CID, PDOL), Out(<AIP, CID, ATC, AC>)
    ] 

//online
rule Card_Responds_To_GPO_ARQC: //generate sk, fresh nc, receive get processing opttions, compute ac, and send back aip, cid, ...
  let sk = f(~mk, ATC)
      AC = MAC(sk, PDOL, ATC)
      AIP = 'fDDA'
      CID = 'ARQC'
      transaction = <~PAN, PDOL, ATC, AC>
  in
    [ In(<'GET_PROCESSING_OPTIONS', PDOL>),
      !IssuedBy(~PAN, $Issuer),
      !ATC(ATC),
      !SharedKey(~PAN, ~mk), !LtkCard(~PAN, ~privkCard), !Pk(~PAN, pk(~privkCard_)), Fr(~nc)
    ]
  --[ Once(<~PAN, ATC, 'Card'>), Eq(~privkCard, ~privkCard_), Running(~PAN, 'Terminal', <'Card', 'Terminal', transaction>), Running(~PAN, $Issuer, <'Card', 'Bank', transaction>)
    ]->
    [
      Card_RESPONDED_To_GPO(~PAN, ~mk, $Issuer, ~privkCard, pk(~privkCard), ATC, ~nc, sk, AC, AIP, CID, PDOL), Out(<AIP, CID, ATC, AC>)
    ] 

// ============== Read Records ==================== //

//offline
rule Terminal_Sends_RR_TC:
    [Terminal_Sent_GPO($Terminal, PDOL), In(<AIP, 'TC', ATC, AC>)]
  -->
    [Terminal_SENT_RR($Terminal, PDOL, <AIP, 'TC', ATC, AC>), Out('READ_RECORD')]

//online
rule Terminal_Sends_RR_ARQC:
    [Terminal_Sent_GPO($Terminal, PDOL), In(<AIP, 'ARQC', ATC, AC>)]
  -->
    [Terminal_SENT_RR($Terminal, PDOL, <AIP, 'ARQC', ATC, AC>), Out('READ_RECORD')]

//offline
rule Card_Responds_To_RR_TC: //last rule for card
  let sm = <snd(PDOL), fst(PDOL), ~nc, ATC, AIP> 
      SDAD = sign(sm, ~privkCard)
      //transaction = <~PAN, PDOL, ATC, AC>
  in
    [Card_RESPONDED_To_GPO(~PAN, ~mk, $Issuer, ~privkCard, pk(~privkCard), ATC, ~nc, sk, AC, AIP, 'TC', PDOL), In('READ_RECORD')]
  -->
  //--/*[Running(~PAN, 'Terminal', <'Card', 'Terminal', transaction>), Running(~PAN, $Issuer, <'Card', 'Issuer', transaction>)]-*/>
    [Card_RESPONDED_To_RR_TC(~PAN, ~mk, $Issuer, ~privkCard, pk(~privkCard), ATC, ~nc, sk, AC, AIP, 'TC', PDOL, sm, SDAD), Out(<~PAN, SDAD, ~nc>)]


//online
rule Card_Responds_To_RR_ARQC: //last rule for card
  let sm = <snd(PDOL), fst(PDOL), ~nc, ATC, AIP>
      SDAD = sign(sm, ~privkCard)
      //transaction = <~PAN, PDOL, ATC, AC>
  in
    [Card_RESPONDED_To_GPO(~PAN, ~mk, $Issuer, ~privkCard, pk(~privkCard), ATC, ~nc, sk, AC, AIP, 'ARQC', PDOL), In('READ_RECORD')]
  -->
  //--/*[Running(~PAN, 'Terminal', <'Card', 'Terminal', transaction>), Running(~PAN, $Issuer, <'Card', 'Issuer', transaction>)]-*/>
    [Card_RESPONDED_To_RR_ARQC(~PAN, ~mk, $Issuer, ~privkCard, pk(~privkCard), ATC, ~nc, sk, AC, AIP, 'ARQC', PDOL, sm, SDAD), Out(<~PAN, SDAD, ~nc>)]

// =========== Offline Data Authentication ============ //

//offline
rule Terminal_Data_Authentication_TC: //last interaction with card
  let sm = <snd(PDOL), fst(PDOL), ~nc, ATC, AIP> in
    [Terminal_SENT_RR($Terminal, PDOL, <AIP, 'TC', ATC, AC>), In(<~PAN, SDAD, ~nc>), !Pk(~PAN, pkC_), In(pkC)]
  --[Eq(verify(SDAD, sm, pkC), true), Eq(pkC, pkC_)/*, Running($Terminal, $Issuer, <'Terminal', 'Issuer', transaction>)*/]->
    [Terminal_Ready_To_Send_AC($Terminal, ~PAN, PDOL, 'TC', ATC, AC)]

//online
rule Terminal_Data_Authentication_ARQC: //last interaction with card
  let sm = <snd(PDOL), fst(PDOL), ~nc, ATC, AIP> 
      transaction = <~PAN, PDOL, ATC, AC>
  in
    [Terminal_SENT_RR($Terminal, PDOL, <AIP, 'ARQC', ATC, AC>), In(<~PAN, SDAD, ~nc>), !Pk(~PAN, pkC_), In(pkC)]
  --[Eq(verify(SDAD, sm, pkC), true), Eq(pkC, pkC_), Running($Terminal, $Issuer, <'Terminal', 'Issuer', transaction>)]->
    [Terminal_Ready_To_Send_AC($Terminal, ~PAN, PDOL, 'ARQC', ATC, AC)]


// ============== Offline Authorization ============== //
rule Terminal_Receives_TC:
    let transaction = <~PAN, PDOL, ATC, AC> in
    [ Terminal_Ready_To_Send_AC($Terminal, ~PAN, PDOL, 'TC', ATC, AC),
      !IssuedBy(~PAN, $Issuer) ]
  --[ Commit('Terminal', ~PAN, <'Card', 'Terminal', transaction>),
      Honest($Issuer), Honest(~PAN) ]->
    [ ]


// ============== Online Authorization ============== //
//TODO
//Terminal sents
rule Terminal_Sends_AC:
  let transaction = <~PAN, PDOL, ATC, AC> in
    [Terminal_Ready_To_Send_AC($Terminal, ~PAN, PDOL, 'ARQC', ATC, AC), Fr(~channelID)]
  --[Running($Terminal, $Issuer, <'Terminal', 'Issuer', transaction>)]->
    [Send($Terminal, $Issuer, <~channelID, '1'>, transaction), Terminal_SENT_AC($Terminal, ~PAN, PDOL, 'ARQC', ATC, AC, <~PAN, PDOL, ATC, AC, ~channelID>)]

//Terminal receives and commits
rule Terminal_Receives_AC_and_Commits: //last rule for terminal
  let transaction = <~PAN, PDOL, ATC, AC> in
    [Recv($Issuer, $Terminal, <~channelID, '2'>, <'ACCEPTED', ARPC>), Terminal_SENT_AC($Terminal, ~PAN, PDOL, 'ARQC', ATC, AC, <~PAN, PDOL, ATC, AC, ~channelID>)] //special order for recv
  --[Online(), Commit('Terminal', ~PAN, <'Card', 'Terminal', transaction>), Commit($Terminal, $Issuer, <'Issuer', 'Terminal', transaction>)]->
    [Terminal_Commits($Terminal, $Issuer, <'ACCEPTED', ARPC>, ~channelID, ARPC)]


// ================== Issuer =================== //
rule Issuer_Receives_AC:
    let AC = MAC(f(~mk, ATC), PDOL, ATC)
        ARPC = MACprime(f(~mk, ATC), AC)
        transaction = <~PAN, PDOL, ATC, AC>
    in
    [ Recv($Terminal, $Issuer, <channelID, '1'>, transaction),
      !SharedKey(~PAN, ~mk),
      !IssuedBy(~PAN, $Issuer) ]
  --[ Once(<~PAN, ATC, 'Issuer'>), //used in the restriction 'once'
      Running($Issuer, $Terminal, <'Issuer', 'Terminal', transaction>) ]->
    [ Issuer_Commits($Issuer, $Terminal, transaction, channelID, ARPC) ]

rule Issuer_Commits:
    let transaction = <~PAN, PDOL, ATC, AC> in //last rule for issuer
    [ Issuer_Commits($Issuer, $Terminal, transaction, channelID, ARPC) ]
  --[ Commit($Issuer, ~PAN, <'Card', 'Issuer', transaction>),
      Commit($Issuer, $Terminal, <'Terminal', 'Issuer', transaction>),
      Honest($Issuer), Honest(~PAN) ]->
    [ Send($Issuer, $Terminal, <channelID, '2'>, <'ACCEPTED', ARPC>) ]


/////////////////////////////////////////////////////
//                 Restrictions                    //
/////////////////////////////////////////////////////
restriction equal:
  "All a b #i. Eq(a, b)@i ==> a = b"

restriction once: //checks that ATC is different per card session
  "All a #i #j. Once(a)@i & Once(a)@j ==> #i = #j"

////////////////////////////////////////////
//              Sanity Check              //
////////////////////////////////////////////
  
lemma executable_offline:
  exists-trace
  "Ex PAN t #i #j.
    not(Online()@j) &
    //Card-Terminal agreement
    i < j &
    Running(PAN, 'Terminal', <'Card', 'Terminal', t>)@i &
    Commit('Terminal', PAN, <'Card', 'Terminal', t>)@j &
    not (Ex A #a. Compromise(A)@a)"

lemma executable_online:
  exists-trace
  "Ex PAN Issuer t #i #j #k #l.
    Online()@j &
    //Card-Terminal agreement
    i < j &
    Running(PAN, 'Terminal', <'Card', 'Terminal', t>)@i &
    Commit('Terminal', PAN, <'Card', 'Terminal', t>)@j &
    //Card-Issuer agreement
    k < l &
    Running(PAN, Issuer, <'Card', 'Issuer', t>)@k &
    Commit(Issuer, PAN, <'Card', 'Issuer', t>)@l &
    not (Ex A #a. Compromise(A)@a)"

//all by terminal offline accepted transactions are auth. to it by card
//all by terminal online accepted transactions are auth. to it by card and issuer
//all by issuer         accepted transactions are auth. to it by card and terminal

// lemma noninjective_agreement:
// "All a b t #i.
//   Commit(a,b,t) @i
//   ==> (Ex #j. Running(b,a,t) @j)
//       | (Ex C #r. Reveal(C) @ r & Honest(C) @ i)"

// lemma auth_to_terminal_offline:
// "All terminal pan card transaction /*issuer*/ #i.
// 	Commit(terminal, pan, <card, 'Terminal', transaction>) @i & Honest(pan) @i// & Honest(issuer) @i
// 	==> (Ex #j. Running(pan, terminal, <card, 'Terminal', transaction>) @j /*& Running(pan, issuer, <'Card', 'Issuer', transaction>) @j*/) 
//       | Ex C #r. Compromise(C) @i & Honest(C) @r"


// //offline
// rule Card_Responds_To_RR_TC: //last rule for card
//   let sm = <snd(PDOL), fst(PDOL), ~nc, ATC, AIP> 
//       SDAD = sign(sm, ~privkCard)
//       transaction = <~PAN, PDOL, ATC, AC>
//   in
//     [Card_RESPONDED_To_GPO(~PAN, ~mk, $Issuer, ~privkCard, pk(~privkCard), ATC, ~nc, sk, AC, AIP, 'TC', PDOL), In('READ_RECORD')]
//   --[Running(~PAN, 'Terminal', <'Card', 'Terminal', transaction>), Running(~PAN, $Issuer, <'Card', 'Issuer', transaction>)]->
//     [Card_RESPONDED_To_RR_TC(~PAN, ~mk, $Issuer, ~privkCard, pk(~privkCard), ATC, ~nc, sk, AC, AIP, 'TC', PDOL, sm, SDAD), Out(<~PAN, SDAD, ~nc>)]
// ============== Offline Authorization ============== //
// rule Terminal_Receives_TC:
//     let transaction = <~PAN, PDOL, ATC, AC> in
//     [ Terminal_Ready_To_Send_AC($Terminal, ~PAN, PDOL, 'TC', ATC, AC),
//       !IssuedBy(~PAN, $Issuer) ]
//   --[ Commit('Terminal', ~PAN, <'Card', 'Terminal', transaction>),
//       Honest($Issuer), Honest(~PAN) ]->
//     [ ]

//   --[Running(~PAN, 'Terminal', <'Card', 'Terminal', transaction>), Running(~PAN, $Issuer, <'Card', 'Issuer', transaction>)]->
// -[ Commit('Terminal', ~PAN, <'Card', 'Terminal', transaction>),
// //       Honest($Issuer), Honest(~PAN) ]->

// lemma auth_to_terminal_offline:
// "All terminal pan card issuer transaction #i.
// 	Commit(terminal, pan, <'Card', 'Terminal', transaction>) @i
// 	==> (Ex #j. Running(pan, terminal, <'Card', 'Terminal', transaction>) @j & Running(pan, issuer, <'Card', 'Issuer', transaction>) @j ) 
//       | (Ex C #r. Reveal(C) @ r & Honest(C) @ i)"

// ============== Online Authorization ============== //
//TODO
//Terminal sents
// rule Terminal_Sends_AC:
//   let transaction = <~PAN, PDOL, ATC, AC> in
//     [Terminal_Ready_To_Send_AC($Terminal, ~PAN, PDOL, 'ARQC', ATC, AC), Fr(~channelID)]
//   --[Running($Terminal, $Issuer, <'Terminal', 'Issuer', transaction>)]->
//     [Send($Terminal, $Issuer, <~channelID, '1'>, transaction), Terminal_SENT_AC($Terminal, ~PAN, PDOL, 'ARQC', ATC, AC, <~PAN, PDOL, ATC, AC, ~channelID>)]

// //Terminal receives and commits
// rule Terminal_Receives_AC_and_Commits: //last rule for terminal
//   let transaction = <~PAN, PDOL, ATC, AC> in
//     [Recv($Issuer, $Terminal, <channelID_, '2'>, <'ACCEPTED', ARPC>), Terminal_SENT_AC($Terminal, ~PAN, PDOL, 'ARQC', ATC, AC, <~PAN, PDOL, ATC, AC, ~channelID>)] //special order for recv
//   --[Online(), Honest($Terminal), Eq(channelID_, ~channelID), Commit('Terminal', ~PAN, <'Card', 'Terminal', transaction>), Commit($Terminal, $Issuer, <'Issuer', 'Terminal', transaction>)]->
//     [Terminal_Commits($Terminal, $Issuer, <'ACCEPTED', ARPC>, channelID_, ARPC)]

//Commit('Terminal', ~PAN, <'Card', 'Terminal', transaction>), Commit($Terminal, $Issuer, <'Issuer', 'Terminal', transaction>)
//Running($Terminal, $Issuer, <'Terminal', 'Issuer', transaction>)

// lemma auth_to_terminal_online:
// "All terminal issuer pan transaction #i.
// 	Commit(terminal, pan, <'Card', 'Terminal', transaction>) @i & Commit(terminal, issuer, <'Issuer', 'Terminal', transaction>) @i
// 	==> (Ex #j. Running(terminal, issuer, <'Issuer', 'Terminal', transaction>) @j ) 
//       | (Ex C #r. Reveal(C) @ r & Honest(C) @ i)"




// ================== Issuer =================== //
// rule Issuer_Receives_AC:
//     let AC = MAC(f(~mk, ATC), PDOL, ATC)
//         ARPC = MACprime(f(~mk, ATC), AC)
//         transaction = <~PAN, PDOL, ATC, AC>
//     in
//     [ Recv($Terminal, $Issuer, <channelID, '1'>, transaction),
//       !SharedKey(~PAN, ~mk),
//       !IssuedBy(~PAN, $Issuer) ]
//   --[ Once(<~PAN, ATC, 'Issuer'>), //used in the restriction 'once'
//       Running($Issuer, $Terminal, <'Issuer', 'Terminal', transaction>) ]->
//     [ Issuer_Commits($Issuer, $Terminal, transaction, channelID, ARPC) ]

// rule Issuer_Commits:
//     let transaction = <~PAN, PDOL, ATC, AC> in
//     [ Issuer_Commits($Issuer, $Terminal, transaction, channelID, ARPC) ]
//   --[ Commit($Issuer, ~PAN, <'Card', 'Issuer', transaction>),
//       Commit($Issuer, $Terminal, <'Terminal', 'Issuer', transaction>),
//       Honest($Issuer), Honest(~PAN) ]->
//     [ Send($Issuer, $Terminal, <channelID, '2'>, <'ACCEPTED', ARPC>) ]

//[Running(~PAN, 'Terminal', <'Card', 'Terminal', transaction>), Running(~PAN, $Issuer, <'Card', 'Issuer', transaction>)]->

// ============== Online Authorization ============== //
//TODO
//Terminal sents
// rule Terminal_Sends_AC:
//   let transaction = <~PAN, PDOL, ATC, AC> in
//     [Terminal_Ready_To_Send_AC($Terminal, ~PAN, PDOL, 'ARQC', ATC, AC), Fr(~channelID)]
//   --[Running($Terminal, $Issuer, <'Terminal', 'Issuer', transaction>)]->
//     [Send($Terminal, $Issuer, <~channelID, '1'>, transaction), Terminal_SENT_AC($Terminal, ~PAN, PDOL, 'ARQC', ATC, AC, <~PAN, PDOL, ATC, AC, ~channelID>)]

// //Terminal receives and commits
// rule Terminal_Receives_AC_and_Commits: //last rule for terminal
//   let transaction = <~PAN, PDOL, ATC, AC> in
//     [Recv($Issuer, $Terminal, <channelID_, '2'>, <'ACCEPTED', ARPC>), Terminal_SENT_AC($Terminal, ~PAN, PDOL, 'ARQC', ATC, AC, <~PAN, PDOL, ATC, AC, ~channelID>)] //special order for recv
//   --[Online(), Honest($Terminal), Eq(channelID_, ~channelID), Commit('Terminal', ~PAN, <'Card', 'Terminal', transaction>), Commit($Terminal, $Issuer, <'Issuer', 'Terminal', transaction>)]->
//     [Terminal_Commits($Terminal, $Issuer, <'ACCEPTED', ARPC>, channelID_, ARPC)]


// lemma auth_to_issuer:
// "All issuer terminal pan card transaction #i.
// 	(Commit(issuer, pan, <card, 'Issuer', transaction>) & Commit(issuer, terminal, <'Terminal', 'Issuer', transaction>))@i
// 	==> (Ex #j. Running(pan, issuer, <card, 'Issuer', transaction>)@j)
//       | (Ex C #r. Reveal(C) @ r & Honest(C) @ i")
  

/////////////////////////////////////////////////////
//           Security Properties                   //
/////////////////////////////////////////////////////


end