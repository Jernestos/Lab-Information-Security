theory IKEv1
begin

/* IKEv1 protocol:
   A -> B : aenc_B{A}, aenc_B{N_A}, g^x  (N_A fresh nonce, x fresh)
   B -> A : aenc_A{B}, aenc_A{N_B}, g^y, HASH_B  (y fresh)
   A -> B : HASH_A
where:
   HASH_R = prf(<skID, g^x, g^y, A, B>)
   HASH_I = prf(<skID, g^y, g^x, B, A>)
   skID = prf(<h(<N_A, N_B>), A, B>)

     */


/* ----------------- */
/* Equational theory */
/* ----------------- */

/* Load the built-in Diffie-Hellman and signature equational theories */
builtins: diffie-hellman, asymmetric-encryption, hashing

/*Define an abstract function prf with no additional algebraic properties
representing a "perfect" pseudo-random function. */
functions: prf/1


/* ------------------ */
/* Key infrastructure */
/* ------------------ */

rule genkey:
   [ Fr(~kA) ] 
   -->
   [ !Key($A, ~kA),
     !Pk($A, pk(~kA)),
     Out(pk(~kA)) ]



/* Question 7*/

/*----------------*/
/* Protocol rules */
/*----------------*/

rule Init_1:
  let gxI = 'g'^~xI
      enc_id_A = aenc($A, pkB)
      enc_NI_A = aenc(~NI, pkB)
      triplet = <enc_id_A, enc_NI_A, gxI>
   in  
      [!Pk($B, pkB), !Key($A, kA), Fr(~NI), Fr(~xI)]
      -->
      [Init_1(<$A, kA, ~xI, gxI, ~NI>, <$B, pkB>), Out(triplet)]

rule Resp_1:
  let gyR = 'g'^~yR
      enc_id_B = aenc($B, pkA)
      enc_NR_B = aenc(~NR, pkA)
      skID = prf(<h(<dec_NI, ~NR>), $A, $B>)
      HASH_B = prf(<skID, gyR, gx, $B, $A>)
      quartet = <enc_id_B, enc_NR_B, gyR, HASH_B>
      kR = prf(<skID, gx^~yR>)
  in //In(<aenc($A, pk(kB)), aenc(dec_NI, pk(kB)), gx>)
  [In(<aenc($A, pk(kB)), aenc(dec_NI, pk(kB)), gx>), !Pk($A, pkA), !Key($B, kB), Fr(~yR), Fr(~NR)]
  --[RunningR($B, $A, kR)]->
  [Resp_1(<$B, kB, ~yR, gyR, ~NR>, <$A, pkA, gx, dec_NI>, skID, HASH_B, kR), Out(quartet)]

rule Init_2:
  let skID = prf(<h(<~NI, dec_enc_NR>), $A, $B>)
      HASH_A = prf(<skID, gxI, gy, $A, $B>)
      HASH_B_Check = prf(<skID, gy, gxI, $B, $A>)
      kI = prf(<skID, gy^~xI>)
  in
  [Init_1(<$A, kA, ~xI, gxI, ~NI>, <$B, pkB>), In(aenc(<aenc($B, pk(kA)), aenc(dec_enc_NR, pk(kA)), gy, HASH_B>, pk(kA)))]
  --[Eq(HASH_B, HASH_B_Check), FinishedI($A), SecretI($A, $B, kI), RunningI($A, $B, kI), CommitI($A, $B, kI)]->
  [Init_2(<$A, kA, ~xI, gxI, ~NI>, <$B, pkB, gy, dec_enc_NR>, skID, HASH_A, kI), Out(HASH_A)]

rule Resp_2:
   let HASH_A_Check = prf(<skID, gx, gyR, $B, $A>) in
      [Resp_1(<$B, kB, ~yR, gyR, ~NR>, <$A, pkA, gx, dec_NI>, skID, HASH_B, kR), In(HASH_A)]
      --[Eq(HASH_A_Check, HASH_A), FinishedR($B), SecretR($A, $B, kR), CommitR($B, $A, kR)]->
      [Resp_2(<$B, kB, ~yR, gyR, ~NR>, <$A, pkA, gx, dec_NI>, skID, HASH_B, kR)]




/* ---------- */
/* Key Reveal */
/* ---------- */
rule q2_attack:
   [!Key($X, k)]
   --[Compromised($X)]->
   [Out(k)]





/* ---------- */
/* Restrictions */
/* ---------- */

restriction equality:
"All x y #i. Eq(x,y) @i ==> x = y"


/* ---------- */
/* Properties */
/* ---------- */

/* Executability checks */
lemma executableI:
exists-trace "Ex #i A. FinishedI(A) @ i & not (Ex #j B. Compromised(B)@j)"

lemma executableR:
exists-trace "Ex #i B. FinishedR(B) @ i & not (Ex #j B. Compromised(B)@j)"


/* Secrecy and agreement properties */

lemma key_secrecyI:
"All #i A B k.
 (SecretI(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
  ==> not (Ex #j. K(k) @ j)"

lemma key_secrecyR:
"All #i A B k.
 (SecretR(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
  ==> not (Ex #j. K(k) @ j)"


lemma agreementR:
"All #i A B k.
  (CommitR( B, A, k) @ i &
   not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
   ==> (Ex #j. RunningI(A, B, k) @ j & j < i)"

lemma agreementI:
"All #i A B k.
  (CommitI( A, B, k) @ i &
   not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
   ==> (Ex #j. RunningR(B, A, k) @ j & j < i)"



/* Perfect Forward Secrecy:  (Question 8)
Please uncomment the following two lemmas for this question.
*/

lemma secrecy_PFS_R:
 " All A B k #i. 
    SecretR(A, B, k) @i &
      not ((Ex #l. (Compromised(A) @ l & l<i )) | (Ex #m. (Compromised(B) @ m & m < i)) )  
    ==> not (Ex #j. K(k)@j )"

lemma secrecy_PFS_I:
 " All A B k #i. 
    SecretI(A, B, k) @i &
      not ((Ex #l. (Compromised(A) @ l & l<i )) | (Ex #m. (Compromised(B) @ m & m < i)) )  
    ==> not (Ex #j. K(k)@j )"



end



