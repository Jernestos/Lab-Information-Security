theory EncryptedDH2
begin

/* Signed Diffie-Hellman protocol, second attempt:
   A -> B : A, aenc_B{A, g^x}  (x fresh)
   B -> A : B, aenc_A{B, g^y, h(g^x)}  (y fresh)
   A -> B : A, aenc_B{A, h(g^y)}  */


/* ----------------- */
/* Equational theory */
/* ----------------- */


/* Load the built-in Diffie-Hellman, asymmetric encryption and hashing equational theories */
builtins: diffie-hellman, asymmetric-encryption, hashing



/* ------------------ */
/* Key infrastructure */
/* ------------------ */

rule genkey: 
   [ Fr(~kA) ] 
   -->
   [ !Key($A, ~kA),  
     !Pk($A, pk(~kA)),
     Out(pk(~kA)) ]


/* Question 6*/

/*----------------*/
/* Protocol rules */
/*----------------*/


rule Init_1:
   let 
       gxI = 'g'^~xI 
       tuple = <$A, gxI>
       enc_tuple = aenc(tuple, pkB)
   in  
      [!Pk($B, pkB), Fr(~xI)]
      -->
      [Init_1($A, ~xI, gxI), Out(enc_tuple)]


rule Resp_1:
   let dec_tuple = adec(enc_tuple, ~kB)
       dec_id_init = fst(dec_tuple)
       dec_gx = snd(dec_tuple)
       hash_dec_gx = h(dec_gx)
       gyR = 'g'^~yR
       kR = dec_gx^~yR
       triplet = <$B, gyR, hash_dec_gx>
       enc_triplet = aenc(triplet, pk_dec_id_init)
   in
      [In(enc_tuple), !Pk(dec_id_init, pk_dec_id_init), !Key($B, ~kB), Fr(~yR)]
      --[RunningR(dec_id_init, $B, kR)]->
      [Resp_1($B, ~yR, gyR, dec_gx, kR), Out(enc_triplet)]


rule Init_2:
   let dec_triplet = adec(enc_triplet, ~kA)
       dec_id_resp = fst(enc_triplet)
       dec_pair = snd(enc_triplet)
       dec_gy = fst(dec_pair)
       dec_hash_gx = snd(dec_pair)
       hash_dec_gy = h(dec_gy)
       tuple = <$A, hash_dec_gy>
       enc_tuple = aenc(tuple, pk_dec_id_resp)
   in
      [Init_1($A, ~xI, gxI), !Pk(dec_id_resp, pk_dec_id_resp), In(enc_triplet), !Key($A, ~kA)]
      --[Eq(dec_hash_gx, h(gxI)), FinishedI($A), SecretI($A, dec_id_resp, kI), RunningI($A, dec_id_resp, kI), CommitI($A, dec_id_resp, kI)]->
      [Init_2($A, ~xI, gxI, dec_gy, kI), Out(enc_tuple)]



rule Resp_2:
   let dec_tuple = adec(enc_tuple, ~kB) 
       dec_id_init = fst(dec_tuple)
       dec_hash_gy = snd(dec_tuple)
   in    
      [Resp_1($B, ~yR, gyR, gx, kR), In(enc_tuple), !Key($B, ~kB)]
      --[Eq(dec_hash_gy, h(gyR)), FinishedR($B), SecretR(dec_id_init, $B, kR), CommitR($B, dec_id_init, kR)]->
      [Resp_2($B, ~yR, gyR, gx, kR)]


/* ---------- */
/* Key Reveal */
/* ---------- */
/* Omit this attack and the we have key secrecy established */
rule q2_attack:
   [!Key(A, k)]
   --[Compromised(A)]->
   [Out(<A, k>)]





/* ---------- */
/* Restrictions */
/* ---------- */

restriction equality:
"All x y #i. Eq(x,y) @i ==> x = y"


/* ---------- */
/* Properties */
/* ---------- */

/* Executability checks */
lemma executableI:
exists-trace "Ex #i A. FinishedI(A) @ i & not (Ex #j B. Compromised(B)@j)"

lemma executableR:
exists-trace "Ex #i B. FinishedR(B) @ i & not (Ex #j B. Compromised(B)@j)"


/* Secrecy and agreement properties */

lemma key_secrecyI:
"All #i A B k.
 (SecretI(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
  ==> not (Ex #j. K(k) @ j)"

lemma key_secrecyR:
"All #i A B k.
 (SecretR(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
  ==> not (Ex #j. K(k) @ j)"


lemma agreementR:
"All #i A B k.
  (CommitR( B, A, k) @ i &
   not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
   ==> (Ex #j. RunningI(A, B, k) @ j & j < i)"

lemma agreementI:
"All #i A B k.
  (CommitI( A, B, k) @ i &
   not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
   ==> (Ex #j. RunningR(B, A, k) @ j & j < i)"


end



