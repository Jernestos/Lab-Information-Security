theory Visa

begin

builtins:  signing, asymmetric-encryption

functions: f/2, MAC/3, MACprime/2

/////////////////////////////////////////////////////
//                     Rules                       //
/////////////////////////////////////////////////////

/*

rule template:    
  []
  -->
  []

*/

//Spawn $amount???

// ========= Terminal-Issuer Channel ========== //
rule Terminal_Issuer_Channel:
    [ Send(Sender, Recipient, channelID, msg) ]
  -->
    [ Recv(Sender, Recipient, channelID, msg) ]

// =========== Application Transaction Counter ==========//
rule Generate_ATC:
    [ Fr(~ATC) ]-->[ !ATC(~ATC), Out(~ATC) ]

// =============== Card setup ================ //
rule Create_Card:
    [ Fr(~PAN),//card number
      Fr(~mk),//symmetric key shared with issuer
      Fr(~privkCard)//card's private key
    ]
  -->
    [ !SharedKey(~PAN, ~mk),
      //annotate the issuing bank
      !IssuedBy(~PAN, $Issuer),
      //PKI
      !LtkCard(~PAN, ~privkCard),
      !Pk(~PAN, pk(~privkCard)),
      Out(pk(~privkCard))
    ]

// =============== Card rules ================ //

rule Card_1:
  let sk = f(~mk, ~ATC) in
    [!SharedKey(~PAN, ~mk), !IssuedBy(~PAN_, $Issuer), !LtkCard(~PAN__, ~privkCard), !Pk(~PAN___, pk(~privkCard____)), In(~ATC), Fr(~nc)]
    --[Eq(~PAN, ~PAN_), Eq(~PAN_, ~PAN__), Eq(~PAN__, ~PAN___), Eq(~privkCard, ~privkCard____)]>
    [Card_St_1(~PAN, ~mk, $Issuer, ~privkCard, pk(~privkCard), ~ATC, ~nc, sk)]


rule Card_2_offline: //CID = TC  , CHECKED
  let AC = MAC(sk, PDOL, ~ATC)
      AIP = 'fDDA'
      CID = 'TC'
      transaction = <~PAN, ~ATC, AC, AIP, CID, PDOL, AIP, PDOL>
  in
    [Card_St_1(~PAN, ~mk, $Issuer, ~privkCard, pk(~privkCard), ~ATC, ~nc, sk), In(<'GET_PROCESSING_OPTIONS', PDOL>)]
    --[Once(<PAN, ~ATC>), Running(~PAN, 'Terminal', <'Card', 'Terminal', transaction>), Running(~PAN, $Issuer, <'Card', 'Bank', transaction>)]->
    [Card_St_2_offline(~PAN, ~mk, $Issuer, ~privkCard, pk(~privkCard), ~ATC, ~nc, sk, AC, AIP, CID, PDOL), Out(<AIP, CID, ATC, AC)]

rule Card_2_online: //CID = ARQC  
  let AC = MAC(sk, PDOL, ~ATC)
      AIP = 'fDDA'
      CID = 'ARQC'
      transaction = <~PAN, ~ATC, AC, AIP, CID, PDOL, AIP, PDOL>
  in
    [Card_St_1(~PAN, ~mk, $Issuer, ~privkCard, pk(~privkCard), ~ATC, ~nc, sk), In(<'GET_PROCESSING_OPTIONS', PDOL>)]
    --[Once(<PAN, ~ATC>), Running(~PAN, 'Terminal', <'Card', 'Terminal', transaction>), Running(~PAN, $Issuer, <'Card', 'Bank', transaction>)]->
    [Card_St_2_online(~PAN, ~mk, $Issuer, ~privkCard, pk(~privkCard), ~ATC, ~nc, sk, AC, AIP, CID, PDOL), Out(<AIP, CID, ATC, AC)]


rule Card_3_offline: 
  let sm = <snd(PDOL), fst(PDOL), ~nc, ~ATC, AIP>
      SDAD = sign(sm, privkCard)
      transaction = <~PAN, ~ATC, AC, AIP, CID, PDOL, AIP, PDOL>
  in
    [Card_St_2_offline(~PAN, ~mk, $Issuer, ~privkCard, pk(~privkCard), ~ATC, ~nc, sk, AC, AIP, CID, PDOL), In('READ RECORD')]
    --[Running(~PAN, 'Terminal', <'Card', 'Terminal', transaction>), Running(~PAN, $Issuer, <'Card', 'Bank', transaction>)]->
    [Card_St_3_offline(~PAN, ~mk, $Issuer, ~privkCard, pk(~privkCard), ~ATC, ~nc, sk, AC, AIP, CID, PDOL, sm, SDAD), Out(<PAN, SDAD, ~nc)]

rule Card_3_online: 
  let sm = <snd(PDOL), fst(PDOL), ~nc, ~ATC, AIP>
      SDAD = sign(sm, privkCard)
      transaction = <~PAN, ~ATC, AC, AIP, CID, PDOL, AIP, PDOL>
  in
    [Card_St_2_online(~PAN, ~mk, $Issuer, ~privkCard, pk(~privkCard), ~ATC, ~nc, sk, AC, AIP, CID, PDOL), In('READ RECORD')]
    --[Running(~PAN, 'Terminal', <'Card', 'Terminal', transaction>), Running(~PAN, $Issuer, <'Card', 'Bank', transaction>)]->
    [Card_St_3_online(~PAN, ~mk, $Issuer, ~privkCard, pk(~privkCard), ~ATC, ~nc, sk, AC, AIP, CID, PDOL, sm, SDAD), Out(<PAN, SDAD, ~nc)]

// ============== Compromise =============== //
rule Compromise_Card:
    [ !LtkCard(~PAN, ~privkCard) ]
  --[ Compromise(~PAN) ]->
    [ Out(<~PAN, ~privkCard>) ]

rule Compromise_Shared_Key:
    [ !IssuedBy(~PAN, $Issuer),
      !SharedKey(~PAN, ~mk) ]
  --[ Compromise($Issuer),
      Compromise(~PAN) ]->
    [ Out(~mk) ]

// =========== Get Processing Options ============ // TERMINAL
rule Terminal_Sends_GPO: //CHECKED
    let PDOL = <$amount, ~un>
    in
    [ Fr(~un) ]
  -->
    [ Out(<'GET_PROCESSING_OPTIONS', PDOL>),
      Terminal_Sent_GPO($Terminal, PDOL) ]

// ============== Read Records ==================== //

rule Card_Responds_To_GPO_Online: //CAN MODIFY THIS ONE
    // [ In(<'GET_PROCESSING_OPTIONS', PDOL>),
    //   !IssuedBy(~PAN, $Issuer),
    //   !ATC(ATC)
    //   //Things to do Here
    // ]
    [Terminal_Sent_GPO($Terminal, PDOL), !IssuedBy(~PAN, $Issuer), In(<AIP, 'ARQC', ATC, AC>)]
  --[ Once(<~PAN, ATC, 'Card'>) //used in the restriction 'once'
    ]->
    [
      Card_Responds_To_GPO_Online($Terminal, PDOL, ~PAN, $Issuer, <AIP, 'ARQC', ATC, AC>), Out('READ RECORD')
    ]

rule Card_Responds_To_GPO_Offline: //CAN MODIFY THIS ONE
    // [ In(<'GET_PROCESSING_OPTIONS', PDOL>),
    //   !IssuedBy(~PAN, $Issuer),
    //   !ATC(ATC)
    //   //Things to do Here
    // ]
    [Terminal_Sent_GPO($Terminal, PDOL), !IssuedBy(~PAN, $Issuer), In(<AIP, 'TC', ATC, AC>)]
  --[ Once(<~PAN, ATC, 'Card'>) //used in the restriction 'once'
    ]->
    [
      Card_Responds_To_GPO_Offline($Terminal, PDOL, ~PAN, $Issuer, <AIP, 'TC', ATC, AC>), Out('READ RECORD')
    ]


// =========== Offline Data Authentication ============ //

rule Terminal_Data_Authentication_Offline:
  let sm = <fst(PDOL), snd(PDOL), ~nc, ATC, AIP> in
  [Card_Responds_To_GPO_Offline($Terminal, PDOL, ~PAN, $Issuer, <AIP, 'TC', ATC, AC>), !Pk(~PAN_, pkC), !IssuedBy(~PAN__, $i), In(<PAN___, SDAD, ~nc)]
  --[Eq(~PAN, ~PAN_), Eq(~PAN_, ~PAN__), Eq(~PAN__, PAN___), Eq($Issuer, $i), Eq(verify(SDAD, sm, pkC), true)]->
  [Terminal_Ready_To_Send_AC($Terminal, ~PAN, PDOL, 'TC', ATC, AC)] //TODO


// ============== Offline Authorization ============== //
rule Terminal_Receives_TC:
    let transaction = <~PAN, PDOL, ATC, AC> in
    [ Terminal_Ready_To_Send_AC($Terminal, ~PAN, PDOL, 'TC', ATC, AC),
      !IssuedBy(~PAN, $Issuer) ]
  --[ Commit('Terminal', ~PAN, <'Card', 'Terminal', transaction>),
      Honest($Issuer), Honest(~PAN) ]->
    [ ]


// ============== Online Authorization ============== //

rule Terminal_Data_Authentication_Online:
  let sm = <fst(PDOL), snd(PDOL), ~nc, ATC, AIP> in
  [Card_Responds_To_GPO_Online($Terminal, PDOL, ~PAN, $Issuer, <AIP, 'ARQC', ATC, AC>), !Pk(~PAN_, pkC), !IssuedBy(~PAN__, $i), In(<PAN___, SDAD, ~nc)]
  --[Eq(~PAN, ~PAN_), Eq(~PAN_, ~PAN__), Eq(~PAN__, PAN___), Eq($Issuer, $i), Eq(verify(SDAD, sm, pkC), true)]->
  [Terminal_Ready_To_Send_AC_Online($Terminal, PDOL, ~PAN, $Issuer, <AIP, 'ARQC', ATC, AC>, pkC, SDAD, ~nc)] //TODO


// ================== Issuer =================== //
rule Issuer_Receives_AC:
    let AC = MAC(f(~mk, ATC), PDOL, ATC)
        ARPC = MACprime(f(~mk, ATC), AC)
        transaction = <~PAN, PDOL, ATC, AC>
    in
    [ Recv($Terminal, $Issuer, <channelID, '1'>, transaction),
      !SharedKey(~PAN, ~mk),
      !IssuedBy(~PAN, $Issuer) ]
  --[ Once(<~PAN, ATC, 'Issuer'>), //used in the restriction 'once'
      Running($Issuer, $Terminal, <'Issuer', 'Terminal', transaction>) ]->
    [ Issuer_Commits($Issuer, $Terminal, transaction, channelID, ARPC) ]

rule Issuer_Commits:
    let transaction = <~PAN, PDOL, ATC, AC> in
    [ Issuer_Commits($Issuer, $Terminal, transaction, channelID, ARPC) ]
  --[ Commit($Issuer, ~PAN, <'Card', 'Issuer', transaction>),
      Commit($Issuer, $Terminal, <'Terminal', 'Issuer', transaction>),
      Honest($Issuer), Honest(~PAN) ]->
    [ Send($Issuer, $Terminal, <channelID, '2'>, <'ACCEPTED', ARPC>) ]


/////////////////////////////////////////////////////
//                 Restrictions                    //
/////////////////////////////////////////////////////
restriction equal:
  "All a b #i. Eq(a, b)@i ==> a = b"

restriction once: //checks that ATC is different per card session
  "All a #i #j. Once(a)@i & Once(a)@j ==> #i = #j"

////////////////////////////////////////////
//              Sanity Check              //
////////////////////////////////////////////
  
lemma executable_offline:
  exists-trace
  "Ex PAN t #i #j.
    not(Online()@j) &
    //Card-Terminal agreement
    i < j &
    Running(PAN, 'Terminal', <'Card', 'Terminal', t>)@i &
    Commit('Terminal', PAN, <'Card', 'Terminal', t>)@j &
    not (Ex A #a. Compromise(A)@a)"

lemma executable_online:
  exists-trace
  "Ex PAN Issuer t #i #j #k #l.
    Online()@j &
    //Card-Terminal agreement
    i < j &
    Running(PAN, 'Terminal', <'Card', 'Terminal', t>)@i &
    Commit('Terminal', PAN, <'Card', 'Terminal', t>)@j &
    //Card-Issuer agreement
    k < l &
    Running(PAN, Issuer, <'Card', 'Issuer', t>)@k &
    Commit(Issuer, PAN, <'Card', 'Issuer', t>)@l &
    not (Ex A #a. Compromise(A)@a)"

/////////////////////////////////////////////////////
//           Security Properties                   //
/////////////////////////////////////////////////////


end
