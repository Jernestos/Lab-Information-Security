#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
#exe = 'handout/exercise4/exercise4c'
exe = './exercise4c'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()
'''
arch     x86
baddr    0x0
binsz    15070
bintype  elf
bits     64
canary   false
class    ELF64
compiler GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
crypto   false
endian   little
havecode true
intrp    /lib64/ld-linux-x86-64.so.2
laddr    0x0
lang     c
linenum  true
lsyms    true
machine  AMD x86-64 architecture
maxopsz  16
minopsz  1
nx       true
os       linux
pcalign  0
pic      true
relocs   true
relro    full
rpath    NONE
sanitiz  false
static   false
stripped false
subsys   linux
va       true
'''
'''
0x000011c9 16 sym.unused -> suspicious
0x000011d9 69 sym.read_line
0x0000121e 72 sym.get_message
0x00001266 107 main
0x00001266 107 sym.main
'''
'''
0x00002008 36 str.Enter_the_message_you_want_to_send:
0x0000202c 17 str.Oh.__s___Really
0x0000203d 27 str.Thanks_for_your_message.
'''

'''
main prints out: Thanks for your message.\n\r
get_message: readline to read in input string
'''

i = 1;

print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvline()) #"Enter the message you want to send"

print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvline()) #"Enter the message you want to send"

#https://docs.pwntools.com/en/stable/rop/rop.html
# move_inst = shellcraft.amd64.mov('rdi', 'cat_flag')
# rop = ROP(exe)

# #"cat flag".encode().hex() -> '63617420666c6167'
# #p64(0x63617420666c6167) -> b'galf tac'
# rop(rdi = 0x63617420666c6167)


# system_address = p64(r.libc.symbols['system'], endian='little') #b"\x56\x12\x40\x00\x00\x00\x00\x00"
# system_address = system_address + (8 - len(system_address)) * b'\x00'




# r.sendline(b"cat flag") #read string with fgets

# print("Msg " + str(i) + ": ", end="")
# i = i + 1
# print(r.recvline()) #"Oh. %s?! Really?"

# print("Msg " + str(i) + ": ", end="")
# i = i + 1
# print(r.recvline()) #"Thanks for your message.\n\r"